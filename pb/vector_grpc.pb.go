// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: vector.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Vector_InnerProduct_FullMethodName        = "/vector.Vector/InnerProduct"
	Vector_AverageValues_FullMethodName       = "/vector.Vector/AverageValues"
	Vector_ScalarVectorProduct_FullMethodName = "/vector.Vector/ScalarVectorProduct"
)

// VectorClient is the client API for Vector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VectorClient interface {
	InnerProduct(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorProductResult, error)
	AverageValues(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorResult, error)
	ScalarVectorProduct(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorResult, error)
}

type vectorClient struct {
	cc grpc.ClientConnInterface
}

func NewVectorClient(cc grpc.ClientConnInterface) VectorClient {
	return &vectorClient{cc}
}

func (c *vectorClient) InnerProduct(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorProductResult, error) {
	out := new(VectorProductResult)
	err := c.cc.Invoke(ctx, Vector_InnerProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorClient) AverageValues(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorResult, error) {
	out := new(VectorResult)
	err := c.cc.Invoke(ctx, Vector_AverageValues_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *vectorClient) ScalarVectorProduct(ctx context.Context, in *VectorInput, opts ...grpc.CallOption) (*VectorResult, error) {
	out := new(VectorResult)
	err := c.cc.Invoke(ctx, Vector_ScalarVectorProduct_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VectorServer is the server API for Vector service.
// All implementations must embed UnimplementedVectorServer
// for forward compatibility
type VectorServer interface {
	InnerProduct(context.Context, *VectorInput) (*VectorProductResult, error)
	AverageValues(context.Context, *VectorInput) (*VectorResult, error)
	ScalarVectorProduct(context.Context, *VectorInput) (*VectorResult, error)
	mustEmbedUnimplementedVectorServer()
}

// UnimplementedVectorServer must be embedded to have forward compatible implementations.
type UnimplementedVectorServer struct {
}

func (UnimplementedVectorServer) InnerProduct(context.Context, *VectorInput) (*VectorProductResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InnerProduct not implemented")
}
func (UnimplementedVectorServer) AverageValues(context.Context, *VectorInput) (*VectorResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AverageValues not implemented")
}
func (UnimplementedVectorServer) ScalarVectorProduct(context.Context, *VectorInput) (*VectorResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ScalarVectorProduct not implemented")
}
func (UnimplementedVectorServer) mustEmbedUnimplementedVectorServer() {}

// UnsafeVectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VectorServer will
// result in compilation errors.
type UnsafeVectorServer interface {
	mustEmbedUnimplementedVectorServer()
}

func RegisterVectorServer(s grpc.ServiceRegistrar, srv VectorServer) {
	s.RegisterService(&Vector_ServiceDesc, srv)
}

func _Vector_InnerProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).InnerProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vector_InnerProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).InnerProduct(ctx, req.(*VectorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vector_AverageValues_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).AverageValues(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vector_AverageValues_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).AverageValues(ctx, req.(*VectorInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _Vector_ScalarVectorProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VectorServer).ScalarVectorProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Vector_ScalarVectorProduct_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VectorServer).ScalarVectorProduct(ctx, req.(*VectorInput))
	}
	return interceptor(ctx, in, info, handler)
}

// Vector_ServiceDesc is the grpc.ServiceDesc for Vector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Vector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vector.Vector",
	HandlerType: (*VectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InnerProduct",
			Handler:    _Vector_InnerProduct_Handler,
		},
		{
			MethodName: "AverageValues",
			Handler:    _Vector_AverageValues_Handler,
		},
		{
			MethodName: "ScalarVectorProduct",
			Handler:    _Vector_ScalarVectorProduct_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "vector.proto",
}
